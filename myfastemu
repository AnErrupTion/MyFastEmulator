#!/usr/bin/env bash
export LC_ALL=C

FONT_RED=`tput setaf 1`
FONT_GREEN=`tput setaf 2`
FONT_YELLOW=`tput setaf 3`
FONT_BLUE=`tput setaf 4`
FONT_RESET=`tput sgr0`
FONT_BOLD=`tput bold`

function shortcut_delete() {
  local SHORTCUT_DIR="/home/${USER}/.local/share/applications"
  if [ -e ~/.local/share/applications/${VMNAME}.desktop ]; then
    rm "${SHORTCUT_DIR}/${VMNAME}.desktop"
    echo " - Deleted the desktop shortcut of the current VM."
  fi
}

function shortcut_create() {
  shortcut_delete
  local filename="/home/${USER}/.local/share/applications/${VMNAME}.desktop"
  cat << EOF > ${filename}
[Desktop Entry]
Name=${VMNAME}
Comment=Launch QEMU VM ${VMNAME}
Exec=${LAUNCHER_DIR}/${LAUNCHER} -vm ${LAUNCHER_DIR}/${VM}
Icon=${VIRGIL_PATH}/pc-bios/qemu-nsis.ico
Terminal=true
Type=Application
Version=1.0
EOF
  echo " - Created a desktop shortcut for the current VM."
}

function snapshot_apply() {
  local snapshot_tag="${1}"
  if [ -z "${snapshot_tag}" ]; then
    echo " - ${FONT_RED}ERROR!${FONT_RESET} No snapshot tag provided."
    exit
  fi

  if [ -e "${disk_img}" ]; then
    ${QEMU_IMG} snapshot -q -a "${snapshot_tag}" "${disk_img}"
    if [ $? -eq 0 ]; then
      echo " - ${FONT_GREEN}SUCCESS!${FONT_RESET} Applied snapshot ${snapshot_tag} to ${disk_img}."
    else
      echo " - ${FONT_RED}ERROR!${FONT_RESET} Failed to apply snapshot ${snapshot_id} to ${disk_img}."
    fi
  else
    echo " - ${FONT_RED}ERROR!${FONT_RESET} ${disk_img} not found. Doing nothing."
  fi
}

function snapshot_create() {
  local snapshot_tag="${1}"
  if [ -z "${snapshot_tag}" ]; then
    echo " - ${FONT_RED}ERROR!${FONT_RESET} No snapshot tag provided."
    exit
  fi

  if [ -e "${disk_img}" ]; then
    ${QEMU_IMG} snapshot -q -c "${snapshot_tag}" "${disk_img}"
    if [ $? -eq 0 ]; then
      echo " - ${FONT_GREEN}SUCCESS!${FONT_RESET} Created snapshot ${snapshot_tag} of ${disk_img}."
    else
      echo " - ${FONT_RED}ERROR!${FONT_RESET} Failed to create snapshot ${snapshot_id} of ${disk_img}."
    fi
  else
    echo " - ${FONT_RED}ERROR!${FONT_RESET} ${disk_img} not found. Doing nothing."
  fi
}

function snapshot_delete() {
  local snapshot_tag="${1}"
  if [ -z "${snapshot_tag}" ]; then
    echo " - ${FONT_RED}ERROR!${FONT_RESET} No snapshot tag provided."
    exit
  fi

  if [ -e "${disk_img}" ]; then
    ${QEMU_IMG} snapshot -q -d "${snapshot_tag}" "${disk_img}"
    if [ $? -eq 0 ]; then
      echo " - ${FONT_GREEN}SUCCESS!${FONT_RESET} Deleted snapshot ${snapshot_tag} of ${disk_img}."
    else
      echo " - ${FONT_RED}ERROR!${FONT_RESET} Failed to delete snapshot ${snapshot_id} of ${disk_img}."
    fi
  else
    echo " - ${FONT_RED}ERROR!${FONT_RESET} ${disk_img} not found. Doing nothing."
  fi
}

function snapshot_info() {
  if [ -e "${disk_img}" ]; then
    ${QEMU_IMG} info "${disk_img}"
  fi
}

function get_port() {
  local PORT_START=22220
  local PORT_RANGE=9
  while true; do
    local CANDIDATE=$[${PORT_START} + (${RANDOM} % ${PORT_RANGE})]
    (echo "" >/dev/tcp/127.0.0.1/${CANDIDATE}) >/dev/null 2>&1
    if [ $? -ne 0 ]; then
      break
    fi
  done
}

function enable_usb_passthrough() {
  local DEVICE=""
  local USB_BUS=""
  local USB_DEV=""
  local USB_NAME=""
  local VENDOR_ID=""
  local PRODUCT_ID=""
  local TEMP_SCRIPT=$(mktemp)
  local EXEC_SCRIPT=0

  # Have any USB devices been requested for pass-through?
  if (( ${#usb_devices[@]} )); then
    echo " - USB: Device pass-through requested:"
    echo "#!/usr/bin/env bash" > "${TEMP_SCRIPT}"
    for DEVICE in "${usb_devices[@]}"; do
      VENDOR_ID=$(echo ${DEVICE} | cut -d':' -f1)
      PRODUCT_ID=$(echo ${DEVICE} | cut -d':' -f2)
      USB_BUS=$(lsusb -d ${VENDOR_ID}:${PRODUCT_ID} | cut -d' ' -f2)
      USB_DEV=$(lsusb -d ${VENDOR_ID}:${PRODUCT_ID} | cut -d' ' -f4 | cut -d':' -f1)
      USB_NAME=$(lsusb -d ${VENDOR_ID}:${PRODUCT_ID} | cut -d' ' -f7-)
      echo " - ${USB_NAME}"
      USB_PASSTHROUGH="${USB_PASSTHROUGH} -device usb-host,vendorid=0x${VENDOR_ID},productid=0x${PRODUCT_ID},bus=xhci.0"

      if [ ! -w /dev/bus/usb/${USB_BUS}/${USB_DEV} ]; then
        local EXEC_SCRIPT=1
        echo "chown root:${USER} /dev/bus/usb/${USB_BUS}/${USB_DEV}" >> "${TEMP_SCRIPT}"
      fi
    done

    if [ ${EXEC_SCRIPT} -eq 1 ]; then
      chmod +x "${TEMP_SCRIPT}"
      echo " - Requested USB device(s) are NOT accessible."
      echo " - ${TEMP_SCRIPT} will be executed to enable access:"
      echo
      cat ${TEMP_SCRIPT}
      echo
      sudo "${TEMP_SCRIPT}"
      if [ $? -ne 0 ]; then
        echo " - ${FONT_YELLOW}WARNING!${FONT_RESET} Enabling USB device access failed."
      fi
    else
      echo " - Requested USB device(s) are accessible."
    fi
    rm -f "${TEMP_SCRIPT}"
  fi
 }

function vm_boot() {
  echo
  echo " ----------------------------------------------------------------------"
  echo " |--aaaaaa--aaa-aaaa-||||||--${FONT_GREEN}MyFastEmulator${FONT_RESET}--||||||-aaaaaa--aaa-aaaa--|"
  echo " |--a-aa-a--a---aaa--||||||--${FONT_GREEN}MyFastEmulator${FONT_RESET}--||||||-a-aa-a--a---aaa---|"
  echo " |--a-aa-a--aa--aaa--||||||--${FONT_GREEN}MyFastEmulator${FONT_RESET}--||||||-a-aa-a--aa--aaa---|"
  echo " |--a----a--a---aaaa-|||||||----------------|||||||-a----a--a---aaaa--|"
  echo " -------------------------|||  Loading...  |||-------------------------"
  echo

  local VMDIR=""
  if [ -f "${disk_img}" ]; then
    VMDIR=$(dirname "${disk_img}")
  fi
  local BIOS=""
  local GL="on"
  local VIRGL="off"
  local UI="gtk"
  local QEMU_VER=$(${QEMU} -version | head -n1 | cut -d' ' -f4 | cut -d'(' -f1)
  echo " - Initializing \"${VM}\"'s settings."
  echo " - QEMU: ${QEMU} v${QEMU_VER}"

  # Fix KVM "permission denied" error (https://bugzilla.redhat.com/show_bug.cgi?id=1479558)
  # Comment this line if you don't have any error related to this.
  # sudo chown $USER /dev/kvm | OR | sudo chmod 666 /dev/kvm | OR | sudo chmod 777 -R /dev/kvm

  if [ ! -z "${guest_ui}" ]; then
    UI="${guest_ui}"
    echo " - UI: ${UI} (choosed by user)"
  else
    echo " - UI: ${UI}"
  fi

  local output_extra=""
  if [ "${UI}" == "gtk" ]; then
    output_extra=",grab-on-hover=on,zoom-to-fit=on"
  fi

  if [ ! -z "${guest_gl}" ]; then
    GL="${guest_gl}"
    echo " - GL: ${GL} (choosed by user)"
  else
    echo " - GL: ${GL}"
  fi

  if [ ! -z "${guest_virgl}" ]; then
    VIRGL="${guest_virgl}"
    echo " - VIRGL (Virgil3D): ${VIRGL} (choosed by user)"
  else
    echo " - VIRGL (Virgil3D): ${VIRGL}"
  fi

  local EFI_VARS=""
  if [ ! -z "${efi_bios}" ] && [ "${efi_bios}" -eq 1 ]; then
    local EFI_CODE="${VIRGIL_PATH}/pc-bios/edk2-x86_64-code.fd"
    if [ -e "${EFI_CODE}" ] ; then
      EFI_VARS="${VMNAME}-vars.fd"

      if [ ! -e "${EFI_VARS}" ]; then
        cp "${VIRGIL_PATH}/pc-bios/edk2-i386-vars.fd" "${EFI_VARS}"
      fi

      BIOS="-drive if=pflash,format=raw,readonly,file=${EFI_CODE} -drive if=pflash,format=raw,file=${EFI_VARS}"
      echo " - BIOS: EFI"
    else
        echo " - BIOS: Booting requested from EFI but no EFI firmware found. Booting from Legacy BIOS."
    fi
  else
    echo " - BIOS: Legacy"
  fi

  local hdd=""
  local hdd2=""
  # Has the no hdd option been requested?
  if [ ! -z "${no_hdd}" ] && [ "${no_hdd}" -eq 1 ]; then
    echo " - No HDD option has been enabled, no hdd will be created."
  else
    if [ ! -f "${disk_img}" ]; then
      # If there is no disk image, create a new image.
      touch "${disk_img}"
      ${QEMU_IMG} create -q -f qcow2 "${disk_img}" "${disk}"
      if [ $? -ne 0 ]; then
        echo " - ${FONT_RED}ERROR!${FONT_RESET} Failed to create ${disk_img} of ${disk}. Stopping here."
        exit 1
      fi
      echo " - Just created a new image, booting from ${iso}."

      if [ -z "${disk}" ]; then
        echo " - Disk size not found, setting default value."
        disk="64G"
      fi
    else
      # Check if there isn't already a process attached to the disk image.
      QEMU_LOCK_TEST=$(${QEMU_IMG} info "${disk_img}" 2>/dev/null)
      if [ $? -ne 0 ]; then
        echo " - Failed to get \"write\" lock. Is another process using the disk?"
        exit 1
      fi

      local disk_curr_size=$(stat -c%s "${disk_img}")
      if [ ! ${disk_curr_size} -le ${DISK_MIN_SIZE} ]; then
        # If there is a disk image AND there is an install on it, do not boot from the iso
        iso=""
      else
        if [ -z "${iso}" ] && [ -z "${img}" ]; then
          echo " - ${FONT_RED}ERROR!${FONT_RESET} You haven't specified an ISO image to boot from."
          exit 1
        fi
      fi
    fi

    # This line is for IDE HDD support. However, Windows XP and lower don't work even with an IDE HDD, so here it's useless, at least for now.
    # hdd="-drive if=none,id=drive0,cache=directsync,aio=native,format=qcow2,file=${disk_img} -device virtio-blk-pci,drive=drive0,scsi=off"
    if [ ! -z ${emulate_disk_aio} ]; then
      hdd="-drive if=none,id=drive0,cache=directsync,aio=${emulate_disk_aio},format=qcow2,file=${disk_img} -device ahci,id=ahci -device ide-hd,drive=drive0,bus=ahci.0"
      echo " - Disk: ${disk_img} (${disk}). I/O is ${emulate_disk_aio} (choosed by user)."
    else
      hdd="-drive if=none,id=drive0,cache=directsync,aio=native,format=qcow2,file=${disk_img} -device ahci,id=ahci -device ide-hd,drive=drive0,bus=ahci.0"
      echo " - Disk: ${disk_img} (${disk}). I/O is native."
    fi
  fi

  if [ ! -z ${disk_img_snapshot} ]; then
    echo " - Snapshot: ${disk_img_snapshot}"
  fi

  # Has the status QUO option been requested?
  if [ ! -z ${status_quo} ] && [ ${status_quo} -eq 1 ]; then
    STATUSQUO="-snapshot"
    echo " - Status QUO option has been enabled, no changes to the disk/snapshot will be made."
  fi

  # Check if there is a boot ISO
  if [ -n "${iso}" ] && [ -e "${iso}" ]; then
    echo " - Boot ISO: ${iso}"
    iso="-drive media=cdrom,file="${iso}",index=0"
  fi

  # Check if there is a second ISO
  if [ -n "${second_iso}" ] && [ -e "${second_iso}" ]; then
    echo " - Second ISO:  ${second_iso}"
    second_iso="-drive media=cdrom,file="${second_iso}",index=1"
  fi

  # Since we can have more cores than the host CPU, let's just put all
  # host's CPU cores by default
  local cores=$(nproc --all)
  if [ ! -z "${total_cores}" ]; then
    cores="${total_cores}"
    echo " - CPU Cores: ${cores} Core(s) (choosed by user)"
  else
    echo " - CPU Cores: ${cores} Core(s)"
  fi

  local ccpu="host"
  if [ ! -z "${emulated_cpu}" ]; then
    ccpu="${emulated_cpu}"
    echo " - Emulated CPU: ${ccpu} (choosed by user)"
  else
    echo " - Emulated CPU: ${ccpu}"
  fi

  ccpu="-cpu ${ccpu},kvm=on"
  local guest_tweaks=""
  local vga_adapter="virtio-vga"
  if [ ! -z ${system_optimization} ] && [ ${system_optimization} -eq 1 ]; then
    echo " - Windows optimization option enabled. Lemme optimize it real quick!"
    guest_tweaks=",hv_time -no-hpet -no-fd-bootchk"
    vga_adapter="qxl-vga"
  else
    echo " - No/Linux optimization option enabled."
  fi

  if [ ! -z ${force_classic_vga} ] && [ ${force_classic_vga} -eq 1 ]; then
    vga_adapter="VGA"
  fi

  local ram="2G"
  local host_ram=$(free --mega -h | grep Mem | cut -d':' -f2 | cut -d'G' -f1 | sed 's/ //g')
  # Round up : https://github.com/wimpysworld/quickemu/issues/11
  host_ram=$(printf '%.*f\n' 0 ${host_ram})
  if [ ${host_ram} -ge 64 ] || [ ${host_ram} -ge 32 ]; then
    ram="16G"
  elif [ ${host_ram} -ge 16 ] || [ ${host_ram} -ge 8 ]; then
    ram="4G"
  fi

  if [ ! -z "${ram_gb}" ]; then
    ram="${ram_gb}"
    echo " - RAM: ${ram} (choosed by user)"
  else
    echo " - RAM: ${ram}"
  fi

  # Guest's max screen resolution
  local xres=0
  local yres=0
  if [ ! -z "${guest_xres}" ]; then
    xres=${guest_xres}
  else
    xres=1280
  fi
  if [ ! -z "${guest_yres}" ]; then
    yres=${guest_yres}
  else
    yres=720
  fi

  if [ "${XDG_SESSION_TYPE}" == "x11" ] && [ "${fullscreen_mode}" == 1 ]; then
    xres=$(xrandr --listmonitors | grep -v Monitors | cut -d' ' -f4 | cut -d'/' -f1 | sort | head -n1)
    yres=$(xrandr --listmonitors | grep -v Monitors | cut -d' ' -f4 | cut -d'/' -f2 | cut -d'x' -f2 | sort | head -n1)
    echo " - Resolution adjusted for full screen."
  fi

  if [ ! -z "${guest_xres}" ] && [ "${xres}" == "${guest_xres}" ]; then
    echo " - Width resolution:  ${xres} (choosed by user)"
  else
    echo " - Width resolution:  ${xres}"
  fi
  if [ ! -z "${guest_yres}" ] && [ "${yres}" == "${guest_yres}" ]; then
    echo " - Height resolution:  ${yres} (choosed by user)"
  else
    echo " - Height resolution:  ${yres}"
  fi

  # Determine what display to use
  local display=""
  if [ "${vga_adapter}" == "virtio-vga" ]; then
    display="-device ${vga_adapter},virgl=${VIRGL},xres=${xres},yres=${yres}"
    echo " - Video: ${vga_adapter}"
  elif [ "${vga_adapter}" == "qxl-vga" ]; then
    echo " - ${FONT_YELLOW}WARNING!${FONT_RESET} ${vga_adapter} will have no support for VirGL."
    display="-device ${vga_adapter},xres=${xres},yres=${yres}"
    echo " - Video: ${vga_adapter}"
  else
    echo " - ${FONT_YELLOW}WARNING!${FONT_RESET} ${vga_adapter} will have no support for VirGL."
    display="-device ${vga_adapter},vgamem_mb=${vga_memory},xres=${xres},yres=${yres}"
    echo " - Video: ${vga_adapter} with ${vga_memory} MB (choosed by user)"
  fi

  # Set the hostname of the VM
  local NET="user,hostname=${VMNAME}"
  # Check if we have samba
  if [ -e "/usr/sbin/smbd" ]; then
    NET="${NET},smb=${HOME}"
    echo " - samba: ${HOME} will be exported to the guest via smb://10.0.2.4/qemu"
  else
    echo " - samba: ${HOME} won't be exported, samba not found."
  fi

  # Find a free port to expose ssh to the guest
  local PORT=$(get_port)
  if [ -n "${PORT}" ]; then
    NET="${NET},hostfwd=tcp::${PORT}-:22"
    echo " - ssh: ${PORT}/tcp is connected. Login via 'ssh user@localhost -p ${PORT}'"
  else
    echo " - ssh: All ports for exposing ssh have been exhausted."
  fi

  # Has virtualization been requested?
  local virtualization=""
  if [ ! -z "${enable_iommu}" ]; then
    if [ "${enable_iommu}" -eq 1 ]; then
      virtualization="-device intel-iommu"
    else
      virtualization="-device amd-iommu"
    fi
  fi

  enable_usb_passthrough

  # Boot the VM
  echo " - Launching \"${VM}\" with requested settings."
  ${QEMU} \
    -name ${VMNAME},process=${VMNAME} \
    -accel kvm,kernel-irqchip=on -machine q35,vmport=off ${BIOS} \
    -smbios type=2,manufacturer=AnErrupTion,product=MyFastEmulator-v2 \
    ${ccpu}${guest_tweaks} -smp cores=${cores} \
    -m ${ram} -device virtio-balloon \
    ${hdd} ${STATUSQUO} \
    ${iso} ${second_iso} \
    ${display} -display ${UI},gl=${GL}${output_extra} \
    -usb -device qemu-xhci,id=xhci,p2=8,p3=8 ${USB_PASSTHROUGH} \
    -device virtio-keyboard -device virtio-tablet \
    -device rtl8139,netdev=nic -netdev ${NET},id=nic \
    -audiodev pa,id=pa,server=unix:${XDG_RUNTIME_DIR}/pulse/native,out.stream-name=${LAUNCHER}-${VMNAME},in.stream-name=${LAUNCHER}-${VMNAME} \
    -device intel-hda -device hda-duplex,audiodev=pa,mixer=off \
    -rtc base=localtime,clock=host \
    -object rng-random,id=rng0,filename=/dev/urandom -device virtio-rng-pci,rng=rng0 \
    ${virtualization} -seed $(($RANDOM * $RANDOM)) \
    -spice port=5930,disable-ticketing \
    -device virtio-serial-pci \
    -device virtserialport,chardev=spicechannel0,name=com.redhat.spice.0 \
    -chardev spicevmc,id=spicechannel0,name=vdagent \
    "$@"
  echo " - The VM has been shut down."
  if [ -e "${EFI_VARS}" ]; then
    rm "${EFI_VARS}"
  fi
}

function usage() {
  echo
  echo "Usage"
  echo "  ${LAUNCHER} --vm CONFIG_FILE.conf"
  echo
  echo "You can also pass optional parameters :"
  echo "  --delete                : Delete the desktop shortcut."
  echo "  --shortcut              : Create a desktop shortcut."
  echo "  --snapshot apply <tag>  : Apply/restore a snapshot."
  echo "  --snapshot create <tag> : Create a snapshot."
  echo "  --snapshot delete <tag> : Delete a snapshot."
  echo "  --snapshot info         : Show disk/snapshot info."
  exit 1
}

readonly QEMU="/home/$USER/qemu-mfe/x86_64-softmmu/qemu-system-x86_64"
readonly QEMU_IMG="/home/$USER/qemu-mfe/qemu-img"
readonly LAUNCHER=$(basename "${0}")
readonly DISK_MIN_SIZE=$((197632 * 8))
readonly VIRGIL_PATH="/home/$USER/qemu-mfe"
readonly LAUNCHER_DIR="$(dirname "$(realpath "$0")")"
VMNAME=""
SNAPSHOT_ACTION=""
SNAPSHOT_TAG=""
SNAPSHOT=0
STATUSQUO=""
USB_PASSTHROUGH=""
VM=""
SHORTCUT=0
DELETE=0

while [ $# -gt 0 ]; do
  case "${1}" in
    -snapshot|--snapshot)
      SNAPSHOT_ACTION="${2}"
      if [ -z "${SNAPSHOT_ACTION}" ]; then
        echo " - ${FONT_RED}ERROR!${FONT_RESET} No snapshot action provided."
        exit 1
      fi
      shift
      SNAPSHOT_TAG="${2}"
      if [ -z "${SNAPSHOT_TAG}" ] && [ "${SNAPSHOT_ACTION}" != "info" ]; then
        echo " - ${FONT_RED}ERROR!${FONT_RESET} No snapshot tag provided."
        exit 1
      fi
      SNAPSHOT=1
      shift
      shift;;
    -vm|--vm)
      VM="${2}"
      VMNAME=$(basename "${VM}" .conf)
      shift
      shift;;
    -shortcut|--shortcut)
      SHORTCUT=1
      shift;;
    -delete|--delete)
      DELETE=1
      shift;;
    -h|--h|-help|--help)
      usage;;
    *)
    echo " - ${FONT_RED}ERROR!${FONT_RESET} \"${1}\" is not a supported parameter."
    usage;;
  esac
done

# Check we have qemu-virgil available
if [ ! -e "${QEMU}" ] && [ ! -e "${QEMU_IMG}" ]; then
  echo " - ${FONT_RED}ERROR!${FONT_RESET} QEMU not found. Please compile and install QEMU from our GitHub page."
  echo "          https://github.com/AnErrupTion/qemu-mfe"
  exit 1
fi

if [ -n "${VM}" ] && [ -e "${VM}" ]; then
  source "${VM}"
  if [ -z "${disk_img}" ] && [ -f "${no_hdd}" ]; then
    echo " - ${FONT_RED}ERROR!${FONT_RESET} No disk_img defined."
    exit 1
  fi
else
  echo " - ${FONT_RED}ERROR!${FONT_RESET} Virtual machine configuration not found."
  usage
fi

if [ ${SNAPSHOT} -eq 1 ]; then
  if [ -n "${SNAPSHOT_ACTION}" ]; then
    case ${SNAPSHOT_ACTION} in
      apply)
          snapshot_apply "${SNAPSHOT_TAG}"
          snapshot_info
          exit;;
      create)
          snapshot_create "${SNAPSHOT_TAG}"
          snapshot_info
          exit;;
      delete)
          snapshot_delete "${SNAPSHOT_TAG}"
          snapshot_info
          exit;;
      info)
          snapshot_info
          exit;;
      *)
    echo " - ${FONT_RED}ERROR!${FONT_RESET} \"${SNAPSHOT_ACTION}\" is not a supported snapshot action."
    usage;;
    esac
  fi
fi

if [ ${DELETE} -eq 1 ]; then
  shortcut_delete
  exit
fi

if [ ${SHORTCUT} -eq 1 ]; then
  shortcut_create
  exit
fi

vm_boot
