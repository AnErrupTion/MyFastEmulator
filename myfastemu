#!/usr/bin/env bash
export LC_ALL=C

function snapshot_apply() {
  local snapshot_tag="${1}"
    if [ -z "${snapshot_tag}" ]; then
      echo " - ERROR! No snapshot tag provided."
      exit
    fi

    if [ -e "${disk_img}" ]; then
      ${QEMU_IMG} snapshot -q -a "${snapshot_tag}" "${disk_img}"
      if [ $? -eq 0 ]; then
          echo " - SUCCESS! Applied snapshot ${snapshot_tag} to ${disk_img}."
      else
          echo " - ERROR! Failed to apply snapshot ${snapshot_id} to ${disk_img}."
      fi
    else
      echo " - ERROR! ${disk_img} not found. Doing nothing."
    fi
}

function snapshot_create() {
  local snapshot_tag="${1}"
    if [ -z "${snapshot_tag}" ]; then
      echo " - ERROR! No snapshot tag provided."
      exit
    fi

    if [ -e "${disk_img}" ]; then
      ${QEMU_IMG} snapshot -q -c "${snapshot_tag}" "${disk_img}"
      if [ $? -eq 0 ]; then
          echo " - SUCCESS! Created snapshot ${snapshot_tag} of ${disk_img}."
      else
          echo " - ERROR! Failed to create snapshot ${snapshot_id} of ${disk_img}."
      fi
    else
      echo " - ERROR! ${disk_img} not found. Doing nothing."
    fi
}

function snapshot_delete() {
  local snapshot_tag="${1}"
    if [ -z "${snapshot_tag}" ]; then
      echo " - ERROR! No snapshot tag provided."
      exit
    fi

    if [ -e "${disk_img}" ]; then
      ${QEMU_IMG} snapshot -q -d "${snapshot_tag}" "${disk_img}"
      if [ $? -eq 0 ]; then
          echo " - SUCCESS! Deleted snapshot ${snapshot_tag} of ${disk_img}."
      else
          echo " - ERROR! Failed to delete snapshot ${snapshot_id} of ${disk_img}."
      fi
    else
      echo " - ERROR! ${disk_img} not found. Doing nothing."
    fi
}

function snapshot_info() {
  if [ -e "${disk_img}" ]; then
    ${QEMU_IMG} info "${disk_img}"
  fi
}

function get_port() {
    local PORT_START=22220
    local PORT_RANGE=9
    while true; do
        local CANDIDATE=$[${PORT_START} + (${RANDOM} % ${PORT_RANGE})]
        (echo "" >/dev/tcp/127.0.0.1/${CANDIDATE}) >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "${CANDIDATE}"
            break
        fi
    done
}

function vm_boot() {
  echo " ----------------------------------------------------------------------"
  echo " |--aaaaaa--aaa-aaaa-||||||--MyFastEmulator--||||||-aaaaaa--aaa-aaaa--|"
  echo " |--a-aa-a--a---aaa--||||||--MyFastEmulator--||||||-a-aa-a--a---aaa---|"
  echo " |--a-aa-a--aa--aaa--||||||--MyFastEmulator--||||||-a-aa-a--aa--aaa---|"
  echo " |--a----a--a---aaaa-||||||||--------------||||||||-a----a--a---aaaa--|"
  echo " --------------------------||  Loading...  ||--------------------------"
  echo

  local VMNAME=$(basename ${VM} .conf)
  local VMDIR=$(dirname ${disk_img})
  local BIOS=""
  local GL="on"
  local VIRGL="on"
  local UI="sdl"
  local QEMU_VER=$(${QEMU} -version | head -n1 | cut -d' ' -f4 | cut -d'(' -f1)
  echo " - Initializing \"${VM}\"'s settings."
  echo " - QEMU:     ${QEMU} v${QEMU_VER}"

  if [ ! -z "${guest_ui}" ]; then
    UI="${guest_ui}"
    echo " - UI:       ${UI} (choosed by user)"
  else
    echo " - UI:       ${UI}"
  fi

  if [ ! -z "${guest_gl}" ]; then
    GL="${guest_gl}"
    echo " - GL:       ${GL} (choosed by user)"
  else
    echo " - GL:       ${GL}"
  fi

  if [ "${UI}" == "gtk" ]; then
    echo " - GTK UI is currently not compatible with GL. Turning GL off."
    GL="off"
  fi

  if [ "${UI}" == "spice-app" ]; then
    echo " - spice-app UI is currently not compatible with GL. Turning GL off."
    GL="off"
  fi

  if [ ! -z "${guest_virgl}" ]; then
    VIRGL="${guest_virgl}"
    echo " - VIRGL (Virgil3D):    ${VIRGL} (choosed by user)"
  else
    echo " - VIRGL (Virgil3D):    ${VIRGL}"
  fi

  if [ ! -z "${efi_bios}" ]; then
    if [ "${efi_bios}" -eq 1 ]; then
      if [ -e /snap/qemu-virgil/current/usr/share/qemu/edk2-x86_64-code.fd ] ; then
          if [ ! -e ${VMDIR}/${VMNAME}-vars.fd ]; then
            cp /snap/qemu-virgil/current/usr/share/qemu/edk2-i386-vars.fd ${VMDIR}/${VMNAME}-vars.fd
          fi
          BIOS="-drive if=pflash,format=raw,readonly,file=/snap/qemu-virgil/current/usr/share/qemu/edk2-x86_64-code.fd -drive if=pflash,format=raw,file=${VMDIR}/${VMNAME}-vars.fd"
          echo " - BIOS:     EFI"
      else
          echo " - EFI:      Booting requested but no EFI firmware found. Booting from Legacy BIOS."
      fi
    else
      echo " - BIOS:     Legacy"
    fi
  else
    echo " - BIOS:     Legacy"
  fi

  local hdd=""
  # Has the no hdd option been requested?
  if [ "${no_hdd}" -eq 1 ]; then
    echo " - No HDD option has been enabled, no hdd will be created."
  else
    if [ ! -f "${disk_img}" ]; then
      # If there is no disk image, create a new image.
      touch "${disk_img}"
      ${QEMU_IMG} create -q -f qcow2 "${disk_img}" "${disk}"
      if [ $? -ne 0 ]; then
        echo " - ERROR! Failed to create ${disk_img} of ${disk}. Stopping here."
        exit 1
      fi
      echo " - Just created a new image, booting from ${iso}."

      if [ -z "${disk}" ]; then
        echo " - Disk size not found, setting default value."
        disk="64G"
      fi

      echo " - ISO Boot:      ${iso}"
    else
      # Check if there isn't already a process attached to the disk image.
      QEMU_LOCK_TEST=$(${QEMU_IMG} info ${disk_img} 2>/dev/null)
      if [ $? -ne 0 ]; then
        echo " - Failed to get \"write\" lock. Is another process using the disk?"
        exit 1
      fi

      local disk_curr_size=$(stat -c%s "${disk_img}")
      if [ ! ${disk_curr_size} -le ${DISK_MIN_SIZE} ]; then
        # If there is a disk image AND there is an install on it, do not boot from the iso
        iso=""
      else
        if [ -z "${iso}" ]; then
          echo " - ERROR! You haven't specified an ISO image to boot from."
          exit 1
        fi
      fi
    fi
    hdd="-drive media=disk,file="${disk_img}",index=1"
    echo " - Disk:     ${disk_img} (${disk})"
  fi

  if [ ! -z ${disk_img_snapshot} ]; then
    echo " - Snapshot: ${disk_img_snapshot}"
  fi

  # Has the status quo option been requested?
  if [ "${status_quo}" -eq 1 ]; then
    STATUSQUO="-snapshot"
    echo " - Status QUO option has been enabled, no changes to the disk/snapshot will be made."
  fi

  # Check if there is a boot ISO (containing the installer)
  if [ -n "${iso}" ] && [ -e "${iso}" ]; then
    iso="-drive media=cdrom,file="${iso}",index=2"
  fi

  # Check if there is a driver ISO (for Windows installers)
  if [ -n "${driver_iso}" ] && [ -e "${driver_iso}" ]; then
    echo " - Windows VirtIO Drivers:  ${driver_iso}"
    driver_iso="-drive media=cdrom,file="${driver_iso}",index=3"
  fi

  local cores="1"
  local allcores=$(nproc --all)
  if [ ${allcores} -ge 8 ]; then
    cores="4"
  elif [ ${allcores} -ge 4 ]; then
    cores="2"
  fi

  if [ ! -z "${total_cores}" ]; then
    cores="${total_cores}"
    echo " - CPU Cores: ${cores} Core(s) (choosed by user)"
  else
    echo " - CPU Cores: ${cores} Core(s)"
  fi

  local acpu="host"
  if [ ! -z "${emulated_cpu}" ]; then
    acpu="${emulated_cpu}"
    echo " - Emulated CPU: ${acpu} (choosed by user)"
  else
    echo " - Emulated CPU: ${acpu}"
  fi

  local ram="2G"
  if [ ! -z "${ram_gb}" ]; then
    ram="${ram_gb}"
    echo " - RAM:      ${ram} (choosed by user)"
  else
    echo " - RAM:      ${ram}"
  fi

  local xres=1152
  local yres=648
  if [ "${XDG_SESSION_TYPE}" == "x11" ]; then
    local LOWEST_WIDTH=$(xrandr --listmonitors | grep -v Monitors | cut -d' ' -f4 | cut -d'/' -f1 | sort | head -n1)
    if [ ${LOWEST_WIDTH} -ge 3840 ]; then
      xres=3200
      yres=1800
    elif [ ${LOWEST_WIDTH} -ge 2560 ]; then
      xres=2048
      yres=1152
    elif [ ${LOWEST_WIDTH} -ge 1920 ]; then
      xres=1664
      yres=936
    elif [ ${LOWEST_WIDTH} -ge 1280 ]; then
      xres=1152
      yres=648
    fi
  fi

  # Guest's max screen resolution
  if [ ! -z "${guest_xres}" ]; then
    xres=${guest_xres}
    echo " - Width resolution:  ${xres} (choosed by user)"
  else
    echo " - Width resolution:  ${xres}"
  fi
  if [ ! -z "${guest_yres}" ]; then
    yres=${guest_yres}
    echo " - Height resolution:  ${yres} (choosed by user)"
  else
    echo " - Height resolution:  ${yres}"
  fi

  # Determine what display to use
  local display=""
  if [ ! -z "${vga_adapter}" ]; then
    if [ "${vga_adapter}" == "virtio" ]; then
      display="-device virtio-vga,virgl=${VIRGL},xres=${xres},yres=${yres}"
      echo " - Video:    VirtIO VGA (choosed by user)"
    else
      if [ ${support_cus_res} -eq 1 ]; then
        echo " - Warning : ${vga_adapter} will have no support for VirGL."
        display="-device ${vga_adapter}-vga,xres=${xres},yres=${yres}"
      else
        echo " - Warning : ${vga_adapter} will have no support for VirGL AND custom resolutions."
        display="-vga ${vga_adapter}"
      fi
      echo " - Video:    ${vga_adapter} (choosed by user)"
    fi
  else
    display="-device virtio-vga,virgl=${VIRGL},xres=${xres},yres=${yres}"
    echo " - Video:    VirtIO VGA"
  fi

  # Set the hostname of the VM
  local NET="user,hostname=${VMNAME}"
  # If smbd is available, export $HOME to the guest via samba
  if [ -e /snap/qemu-virgil/current/usr/sbin/smbd ]; then
      NET="${NET},smb=${HOME}"
  fi

  if [[ ${NET} == *"smb"* ]]; then
    echo " - smbd:     ${HOME} will be exported to the guest via smb://10.0.2.4/qemu"
  else
    echo " - smbd:     ${HOME} will not be exported to the guest. 'smbd' not found."
  fi

  # Find a free port to expose ssh to the guest
  local PORT=$(get_port)
  if [ -n "${PORT}" ]; then
    NET="${NET},hostfwd=tcp::${PORT}-:22"
    echo " - ssh:      ${PORT}/tcp is connected. Login via 'ssh user@localhost -p ${PORT}'"
  else
    echo " - ssh:      All ports for exposing ssh have been exhausted."
  fi

  # Boot the VM
  echo " - Launching \"${VM}\" with requested settings."
  ${QEMU} -name ${VMNAME},process=${VMNAME} \
    ${BIOS} \
    ${hdd} \
    ${iso} ${driver_iso} \
    -enable-kvm \
    -machine q35,accel=kvm \
    -cpu ${acpu},kvm=on \
    -accel kvm,thread=multi \
    -smp cores=${cores} \
    -m ${ram} \
    -device virtio-balloon \
    -netdev ${NET},id=nic \
    -device virtio-net,netdev=nic \
    -rtc base=localtime,clock=host \
    -serial mon:stdio \
    -audiodev pa,id=pa,server=unix:${XDG_RUNTIME_DIR}/pulse/native,out.stream-name=${LAUNCHER}-${VMNAME},in.stream-name=${LAUNCHER}-${VMNAME} \
    -device intel-hda -device hda-duplex,audiodev=pa \
    -device qemu-xhci,id=xhci,p2=8,p3=8 -device usb-kbd -device usb-tablet \
    -object rng-random,id=rng0,filename=/dev/urandom \
    -device virtio-rng-pci,rng=rng0 \
    ${display} \
    -display ${UI},gl=${GL} \
    ${STATUSQUO} \
    "$@"
}

function usage() {
  echo
  echo "Usage"
  echo "  ${LAUNCHER} --vm CONFIG_FILE.conf"
  echo
  echo "You can also pass optional parameters"
  echo "  --snapshot apply <tag>  : Apply/restore a snapshot."
  echo "  --snapshot create <tag> : Create a snapshot."
  echo "  --snapshot delete <tag> : Delete a snapshot."
  echo "  --snapshot info         : Show disk/snapshot info."
  exit 1
}

readonly QEMU="/snap/bin/qemu-virgil"
readonly QEMU_IMG="/snap/bin/qemu-virgil.qemu-img"
readonly LAUNCHER=$(basename $0)
readonly DISK_MIN_SIZE=$((197632 * 8))
SNAPSHOT_ACTION=""
SNAPSHOT_TAG=""
SNAPSHOT=0
STATUSQUO=""
VM=""

while [ $# -gt 0 ]; do
  case "${1}" in
    -snapshot|--snapshot)
      SNAPSHOT_ACTION="${2}"
      if [ -z "${SNAPSHOT_ACTION}" ]; then
        echo " - ERROR! No snapshot action provided."
        exit 1
      fi
      shift
      SNAPSHOT_TAG="${2}"
      if [ -z "${SNAPSHOT_TAG}" ] && [ "${SNAPSHOT_ACTION}" != "info" ]; then
        echo " - ERROR! No snapshot tag provided."
        exit 1
      fi
      SNAPSHOT=1
      shift
      shift;;
    -vm|--vm)
      VM="$2"
      shift
      shift;;
    -h|--h|-help|--help)
      usage;;
    *)
    echo " - ERROR! \"${1}\" is not a supported parameter."
    usage;;
  esac
done

# Check we have qemu-virgil available
if [ ! -e "${QEMU}" ] && [ ! -e "${QEMU_IMG}" ]; then
  echo " - ERROR! qemu-virgil not found. Please install the qemu-virgil snap."
  echo "          https://snapcraft.io/qemu-virgil"
  exit 1
fi

if [ -n "${VM}" ] && [ -e "${VM}" ]; then
  source "${VM}"
  if [ -z "${disk_img}" ] && [ -f "${no_hdd}" ]; then
    echo " - ERROR! No disk_img defined."
    exit 1
  fi 
else
  echo " - ERROR! Virtual machine configuration not found."
  usage
fi

if [ ${SNAPSHOT} -eq 1 ]; then
  if [ -n "${SNAPSHOT_ACTION}" ]; then
    case ${SNAPSHOT_ACTION} in
      apply)
          snapshot_apply "${SNAPSHOT_TAG}"
          snapshot_info
          exit;;
      create)
          snapshot_create "${SNAPSHOT_TAG}"
          snapshot_info
          exit;;
      delete)
          snapshot_delete "${SNAPSHOT_TAG}"
          snapshot_info
          exit;;
      info)
          snapshot_info
          exit;;
      *)
    echo " - ERROR! \"${SNAPSHOT_ACTION}\" is not a supported snapshot action."
    usage;;
    esac
  fi
fi

vm_boot
